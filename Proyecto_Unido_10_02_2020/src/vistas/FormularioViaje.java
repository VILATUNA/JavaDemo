/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import controlador.LeerListaConductor;
import modelo.DatosViaje;
import static vistas.Ruta.map;
import com.teamdev.jxmaps.LatLng;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import java.io.*;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Admini
 */
public class FormularioViaje extends javax.swing.JFrame {

    /**
     * Creates new form FormularioViaje
     */
    final Ruta example = new Ruta("PoliDriver");
    float distancia = 0;
    float tiempo = 0;
    float monto = 0;
    float gananciaPolidriver = 0;
    int horas = 0;
    String tiempoTotal = "";
    
    
    LeerListaConductor obj = new LeerListaConductor();
    SimpleDateFormat FormaFecha = new SimpleDateFormat("dd/MM/yyyy");
   
    public FormularioViaje() {
        initComponents();

        this.getContentPane().setBackground(Color.WHITE);
        jPanel2.add(example, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 700));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelViaje = new javax.swing.JPanel();
        jLabelPuntosViaje = new javax.swing.JLabel();
        jLabelCiudadOrigen = new javax.swing.JLabel();
        jComboBoxCiudadOrigen = new javax.swing.JComboBox<>();
        jLabelCiudadDestino = new javax.swing.JLabel();
        jComboBoxCiudadDestino = new javax.swing.JComboBox<>();
        jLabelFechaViaje = new javax.swing.JLabel();
        jLabelFechaDalida = new javax.swing.JLabel();
        jDateChooserSalida = new com.toedter.calendar.JDateChooser();
        jComboBoxHoraSalida = new javax.swing.JComboBox<>();
        jComboBoxMinutosSalida = new javax.swing.JComboBox<>();
        jLabelHoraSalida = new javax.swing.JLabel();
        jLabelMinutosSalida = new javax.swing.JLabel();
        jLabelLogo = new javax.swing.JLabel();
        jPanelDisponibilidad = new javax.swing.JPanel();
        jLabelDAtosViaje = new javax.swing.JLabel();
        jLabelDistancia = new javax.swing.JLabel();
        jTextFieldDistancia = new javax.swing.JTextField();
        jLabelTiempoEstimado = new javax.swing.JLabel();
        jTextFieldTiempoEstimado = new javax.swing.JTextField();
        jLabelCostoEstimado = new javax.swing.JLabel();
        jTextFieldCostoEstimado = new javax.swing.JTextField();
        jLabelGanacias = new javax.swing.JLabel();
        jTextFieldGananciaPolidriver = new javax.swing.JTextField();
        jButtonCalcularRuta = new javax.swing.JButton();
        jLabelAsientos = new javax.swing.JLabel();
        jTextFieldAsientos = new javax.swing.JTextField();
        ImagenAsientos = new javax.swing.JLabel();
        jLabelCosto = new javax.swing.JLabel();
        jTextFieldCosto = new javax.swing.JTextField();
        jLabelImagenDinero = new javax.swing.JLabel();
        jButtonCrearViaje = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        cerrar = new javax.swing.JButton();

        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(1240, 620));
        setResizable(false);

        jLabelPuntosViaje.setBackground(new java.awt.Color(255, 255, 255));
        jLabelPuntosViaje.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        jLabelPuntosViaje.setForeground(new java.awt.Color(5, 71, 82));
        jLabelPuntosViaje.setText("Puntos de Viaje");
        jLabelPuntosViaje.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabelPuntosViaje.setOpaque(true);

        jLabelCiudadOrigen.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jLabelCiudadOrigen.setForeground(new java.awt.Color(5, 71, 82));
        jLabelCiudadOrigen.setText("Ciudad de Origen");

        jComboBoxCiudadOrigen.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jComboBoxCiudadOrigen.setForeground(new java.awt.Color(5, 71, 82));
        jComboBoxCiudadOrigen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar:", "Ibarra", "Guayaquil", "Latacunga", "Loja", "Quito", "Santo Domingo", " " }));

        jLabelCiudadDestino.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jLabelCiudadDestino.setForeground(new java.awt.Color(5, 71, 82));
        jLabelCiudadDestino.setText("Ciudad de Destino");

        jComboBoxCiudadDestino.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jComboBoxCiudadDestino.setForeground(new java.awt.Color(5, 71, 82));
        jComboBoxCiudadDestino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar:", "Ibarra", "Guayaquil", "Latacunga", "Loja", "Quito", "Santo Domingo", " " }));

        jLabelFechaViaje.setBackground(new java.awt.Color(255, 255, 255));
        jLabelFechaViaje.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        jLabelFechaViaje.setForeground(new java.awt.Color(5, 71, 82));
        jLabelFechaViaje.setText("Dia y Hora de Viaje");
        jLabelFechaViaje.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabelFechaViaje.setOpaque(true);

        jLabelFechaDalida.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jLabelFechaDalida.setForeground(new java.awt.Color(5, 71, 82));
        jLabelFechaDalida.setText("Fecha de Salida");

        jDateChooserSalida.setForeground(new java.awt.Color(5, 71, 82));
        jDateChooserSalida.setEnabled(false);
        jDateChooserSalida.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jDateChooserSalida.setMinSelectableDate(new Date());

        jComboBoxHoraSalida.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jComboBoxHoraSalida.setForeground(new java.awt.Color(5, 71, 82));
        jComboBoxHoraSalida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        jComboBoxHoraSalida.setEnabled(false);

        jComboBoxMinutosSalida.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jComboBoxMinutosSalida.setForeground(new java.awt.Color(5, 71, 82));
        jComboBoxMinutosSalida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "10", "20", "30", "40", "50" }));
        jComboBoxMinutosSalida.setEnabled(false);

        jLabelHoraSalida.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jLabelHoraSalida.setForeground(new java.awt.Color(5, 71, 82));
        jLabelHoraSalida.setText("Hora");

        jLabelMinutosSalida.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jLabelMinutosSalida.setForeground(new java.awt.Color(5, 71, 82));
        jLabelMinutosSalida.setText("Minutos");

        javax.swing.GroupLayout jPanelViajeLayout = new javax.swing.GroupLayout(jPanelViaje);
        jPanelViaje.setLayout(jPanelViajeLayout);
        jPanelViajeLayout.setHorizontalGroup(
            jPanelViajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelViajeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelViajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelFechaDalida)
                    .addGroup(jPanelViajeLayout.createSequentialGroup()
                        .addComponent(jDateChooserSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxHoraSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelHoraSalida)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxMinutosSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelMinutosSalida))
                    .addGroup(jPanelViajeLayout.createSequentialGroup()
                        .addComponent(jLabelCiudadOrigen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxCiudadOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabelCiudadDestino)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxCiudadDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanelViajeLayout.createSequentialGroup()
                .addGroup(jPanelViajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelPuntosViaje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelFechaViaje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelViajeLayout.setVerticalGroup(
            jPanelViajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelViajeLayout.createSequentialGroup()
                .addComponent(jLabelPuntosViaje, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelViajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelCiudadOrigen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelViajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxCiudadOrigen)
                        .addComponent(jLabelCiudadDestino)
                        .addComponent(jComboBoxCiudadDestino)))
                .addGap(18, 18, 18)
                .addComponent(jLabelFechaViaje, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelFechaDalida)
                .addGap(18, 18, 18)
                .addGroup(jPanelViajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooserSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelViajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxHoraSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelHoraSalida)
                        .addComponent(jComboBoxMinutosSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelMinutosSalida)))
                .addGap(10, 10, 10))
        );

        jLabelLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImagenesBlablacar/Anotación 2020-01-23 030344 (2).png"))); // NOI18N

        jLabelDAtosViaje.setBackground(new java.awt.Color(255, 255, 255));
        jLabelDAtosViaje.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        jLabelDAtosViaje.setForeground(new java.awt.Color(5, 71, 82));
        jLabelDAtosViaje.setText("Datos del Viaje");
        jLabelDAtosViaje.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabelDAtosViaje.setOpaque(true);

        jLabelDistancia.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jLabelDistancia.setForeground(new java.awt.Color(5, 71, 82));
        jLabelDistancia.setText("Distancia");

        jTextFieldDistancia.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jTextFieldDistancia.setForeground(new java.awt.Color(5, 71, 82));
        jTextFieldDistancia.setEnabled(false);

        jLabelTiempoEstimado.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jLabelTiempoEstimado.setForeground(new java.awt.Color(5, 71, 82));
        jLabelTiempoEstimado.setText("Tiempo Estimado");

        jTextFieldTiempoEstimado.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jTextFieldTiempoEstimado.setForeground(new java.awt.Color(5, 71, 82));
        jTextFieldTiempoEstimado.setEnabled(false);

        jLabelCostoEstimado.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jLabelCostoEstimado.setForeground(new java.awt.Color(5, 71, 82));
        jLabelCostoEstimado.setText("Costo Estimado");

        jTextFieldCostoEstimado.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jTextFieldCostoEstimado.setForeground(new java.awt.Color(5, 71, 82));
        jTextFieldCostoEstimado.setEnabled(false);

        jLabelGanacias.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jLabelGanacias.setForeground(new java.awt.Color(5, 71, 82));
        jLabelGanacias.setText("Ganacia POLIDRIVER");

        jTextFieldGananciaPolidriver.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jTextFieldGananciaPolidriver.setForeground(new java.awt.Color(5, 71, 82));
        jTextFieldGananciaPolidriver.setEnabled(false);

        jButtonCalcularRuta.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jButtonCalcularRuta.setForeground(new java.awt.Color(5, 71, 82));
        jButtonCalcularRuta.setText("Calcular");
        jButtonCalcularRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalcularRutaActionPerformed(evt);
            }
        });

        jLabelAsientos.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jLabelAsientos.setForeground(new java.awt.Color(5, 71, 82));
        jLabelAsientos.setText("Numero de Asientos ");

        jTextFieldAsientos.setEditable(false);
        jTextFieldAsientos.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jTextFieldAsientos.setForeground(new java.awt.Color(5, 71, 82));

        ImagenAsientos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImagenesBlablacar/82518.png"))); // NOI18N

        jLabelCosto.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jLabelCosto.setForeground(new java.awt.Color(5, 71, 82));
        jLabelCosto.setText("Costo del Viaje");

        jTextFieldCosto.setEditable(false);
        jTextFieldCosto.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jTextFieldCosto.setForeground(new java.awt.Color(5, 71, 82));

        jLabelImagenDinero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImagenesBlablacar/Dolar.png"))); // NOI18N

        jButtonCrearViaje.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jButtonCrearViaje.setForeground(new java.awt.Color(5, 71, 82));
        jButtonCrearViaje.setText("Crear Viaje");
        jButtonCrearViaje.setEnabled(false);
        jButtonCrearViaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCrearViajeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelDisponibilidadLayout = new javax.swing.GroupLayout(jPanelDisponibilidad);
        jPanelDisponibilidad.setLayout(jPanelDisponibilidadLayout);
        jPanelDisponibilidadLayout.setHorizontalGroup(
            jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDisponibilidadLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelDisponibilidadLayout.createSequentialGroup()
                        .addGroup(jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelDisponibilidadLayout.createSequentialGroup()
                                .addGroup(jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelDistancia)
                                    .addComponent(jLabelTiempoEstimado)
                                    .addComponent(jLabelCostoEstimado))
                                .addGap(33, 33, 33))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDisponibilidadLayout.createSequentialGroup()
                                .addComponent(jLabelGanacias)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldDistancia)
                            .addComponent(jTextFieldCostoEstimado)
                            .addComponent(jTextFieldGananciaPolidriver)
                            .addComponent(jTextFieldTiempoEstimado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelDisponibilidadLayout.createSequentialGroup()
                                .addComponent(jLabelCosto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldCosto, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelDisponibilidadLayout.createSequentialGroup()
                                .addComponent(jLabelAsientos)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldAsientos, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanelDisponibilidadLayout.createSequentialGroup()
                        .addComponent(jButtonCalcularRuta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonCrearViaje)))
                .addGap(28, 28, 28)
                .addGroup(jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelImagenDinero)
                    .addComponent(ImagenAsientos))
                .addGap(0, 52, Short.MAX_VALUE))
            .addComponent(jLabelDAtosViaje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelDisponibilidadLayout.setVerticalGroup(
            jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDisponibilidadLayout.createSequentialGroup()
                .addComponent(jLabelDAtosViaje, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ImagenAsientos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelDistancia)
                        .addComponent(jTextFieldDistancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelAsientos)
                        .addComponent(jTextFieldAsientos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelCosto)
                    .addComponent(jTextFieldCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelImagenDinero)
                    .addGroup(jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelTiempoEstimado)
                        .addComponent(jTextFieldTiempoEstimado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCostoEstimado)
                    .addComponent(jTextFieldCostoEstimado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelGanacias)
                    .addComponent(jTextFieldGananciaPolidriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelDisponibilidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCalcularRuta)
                    .addComponent(jButtonCrearViaje))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cerrar.setText("Cerrar Sesión");
        cerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelLogo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelDisponibilidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelViaje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(cerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelLogo)
                        .addGap(18, 18, 18)
                        .addComponent(jPanelViaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelDisponibilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(cerrar)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCrearViajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCrearViajeActionPerformed
     String fecha;
        String horaSalida = "", minutosSalida = "";
        String HoraLlegada = "";
        String Salida = " ", LLegada = " ", asientos=" ",costo=" ";
        int asientosD=0;
        int asientosA=0;
        int auxcosto=0;
        //optencion de fecha
        SimpleDateFormat FormaFecha = new SimpleDateFormat("dd/MM/yyyy");
        if (this.jDateChooserSalida.getDate() != null) {
            fecha = FormaFecha.format(this.jDateChooserSalida.getDate());
        } else {     fecha = " ";    }
        
        horaSalida = this.jComboBoxHoraSalida.getSelectedItem().toString();
        minutosSalida = this.jComboBoxMinutosSalida.getSelectedItem().toString();
        HoraLlegada = this.jTextFieldTiempoEstimado.getText();
        Salida = this.jComboBoxCiudadOrigen.getSelectedItem().toString();
        LLegada = this.jComboBoxCiudadDestino.getSelectedItem().toString();
        asientos= this.jTextFieldAsientos.getText().toString();
        costo= this.jTextFieldCosto.getText().toString();
        
        System.err.println(Salida + "    " + LLegada);
        
       if (fecha.equals(" ") || horaSalida.equals("  ") || minutosSalida.equals("  ") || Salida.equals("  ") 
                || LLegada.equals("  ") || HoraLlegada.equals(" ") || asientos.equals(" ") || costo.equals(" ") ) {
            // cadena no está vacía
            JOptionPane.showMessageDialog(this, "No dejar campos Vacíos", "Error!", JOptionPane.ERROR_MESSAGE);
        } else if (Salida == null ? LLegada == null : Salida.equals(LLegada)) {
            JOptionPane.showMessageDialog(this, "Punto de Salida Y de llegada Iguales", "Error!", JOptionPane.ERROR_MESSAGE);

        } else{
        ///envio de USER
        
        asientosD=Integer.parseInt(jTextFieldAsientos.getText());
        System.out.println(" asientos viaje "+asientosD);
        asientosA=Integer.parseInt(obj.getTotalAsientos());
        System.out.println(" asientos auto "+asientosA);
        auxcosto=Integer.parseInt(this.jTextFieldCosto.getText().toString());
        }
        if ((asientosD >= asientosA) || (asientosD <= 0) || (auxcosto < 0)){ 
        JOptionPane.showMessageDialog(null,"Numero de asientos incorrecto o costo no permitido", "Error", 1);
        
         System.out.println("asientos disponibles "+asientosD+" asientos auto "+asientosA);
        } else{
////
             //señal que ingreso correcto de datos con las validaciones
            System.out.println("ingreso registro viaje");
            //guarda en archivo el conductor correcto segun la clase archivos plano
            obj.guardarDatosConductor();
            
            DatosViaje DATA = new DatosViaje();
            DATA.setLugar_origen(jComboBoxCiudadOrigen.getSelectedItem().toString());
            DATA.setLugar_destino(jComboBoxCiudadDestino.getSelectedItem().toString());
            //conversion de fecha
            Date date1;
          try {
              date1 = new SimpleDateFormat("dd/MM/yyyy").parse(fecha);
              DATA.setFecha(date1);
          } catch (ParseException ex) {
              Logger.getLogger(FormularioViaje.class.getName()).log(Level.SEVERE, null, ex);
          }
           
            DATA.setHora_salida(horaSalida + ":" + minutosSalida);
            DATA.setHora_llegada(HoraLlegada);
            //envio a disponibilidad
            DATA.setCosto(jTextFieldCosto.getText());
            DATA.setDisponibilidad(jTextFieldAsientos.getText());
            
            
            
            File viajeTxt = new File("ViajeTemporal.txt");
            try {
                if (viajeTxt.createNewFile()) {
                    System.out.println("Se ha creado el archivo");
                }
            } catch (IOException e) {
                System.out.println("No se creó el archivo");
            }
            try {

                
                
                BufferedWriter Escribir = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(viajeTxt, true), "utf-8"));

                Escribir.write(DATA.getLugar_origen() + "++");
                Escribir.write(DATA.getLugar_destino() + "++");
                Escribir.write(DATA.getFecha() + "++");
                Escribir.write(DATA.getHora_salida() + "++");
                Escribir.write(DATA.getHora_llegada() + "++");
                //ingreso al archivo desde disponibilidad
                Escribir.write(DATA.getCosto()+"++");
                Escribir.write(DATA.getDisponibilidad()+"++{}\n");
                
                
                
                
                System.out.println("Datos ingresados");
                JOptionPane.showMessageDialog(null,"Viaje Creado", "Listo", 1);
                Escribir.close();
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }

            //aparicion siguiente ventana
        }//fin else

         
    }//GEN-LAST:event_jButtonCrearViajeActionPerformed

    private void jButtonCalcularRutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalcularRutaActionPerformed
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        LatLng i[] = new LatLng[10000];

        try {
            // Apertura del fichero y creacion de BufferedReader
            archivo = new File("rutas.txt");
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);
            int c = 0;

            // Lectura del fichero
            String linea[] = new String[1000];
            while ((linea[c] = br.readLine()) != null) {
                c++;
            }
            for (int j = 0; j < c; j++) {
                //System.out.println(linea[j]);
                String[] latlong = linea[j].split(",");
                double latitud = Double.parseDouble(latlong[0]);
                double longitud = Double.parseDouble(latlong[1]);
                LatLng locacion = new LatLng(latitud, longitud);
                i[j] = locacion;
                //System.out.println(i[j]);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != fr) {
                    fr.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }

        i[11] = new LatLng(-0.096147, -78.468828); // carcelen
        i[276] = new LatLng(-3.982421, -79.204500); //riobamba-loja159
        int jj;
        int kk;

        if (jComboBoxCiudadOrigen.getSelectedItem() == "Quito") {
            if (jComboBoxCiudadDestino.getSelectedItem() == "Loja") {
                jPanel2.add(example, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 700));
                for (jj = 11; jj < 41; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }
                for (kk = 119; kk < 275; kk++) {
                    example.generarRuta(i[kk], i[kk + 1], false);
                }

                example.generateMarker(i[11]);
                example.generateMarker(i[275]);

                distancia = example.calcularDistancia(i[11], i[276]);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Santo Domingo") {

                example.generateMarker(i[11]);

                for (kk = 11; kk < 22; kk++) {
                    example.generarRuta(i[kk], i[kk + 1], false);
                }
                example.generarRuta(i[22], i[277], false);
                for (jj = 277; jj < 511; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[512]);

                distancia = (float) (example.calcularDistancia(i[11], i[511])*0.25);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

                //example.generateSimplePath(Quito, Guayaquil, true);
            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Guayaquil") {

                for (jj = 11; jj < 116; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[11]);
                example.generateMarker(i[116]);

                distancia = (float) (example.calcularDistancia(i[11], i[116]) * 0.39);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Latacunga") {

                for (jj = 11; jj < 29; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[11]);
                example.generateMarker(i[29]);

                distancia = (float) (example.calcularDistancia(i[11], i[29]));
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);
                //example.generateSimplePath(Quito, Latacunga, true);
            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Ibarra") {

                for (jj = 10; jj > 0; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[11]);
                example.generateMarker(i[1]);

                distancia = (float) (example.calcularDistancia(i[1], i[10]) * 0.4);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            }
        } else if (jComboBoxCiudadOrigen.getSelectedItem() == "Loja") {
            if (jComboBoxCiudadDestino.getSelectedItem() == "Quito") {
                example.generateMarker(i[11]);
                for (kk = 275; kk >= 117; kk--) {
                    example.generarRuta(i[kk], i[kk + 1], false);
                }
                example.generarRuta(i[117], i[40], false);
                for (jj = 40; jj >= 11; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                
                example.generateMarker(i[275]);

                distancia = example.calcularDistancia(i[11], i[276]);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);
            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Guayaquil") {
                
                example.generateMarker(i[788]);
                for (jj = 787; jj > 591; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }
                example.generateMarker(i[592]);
                
                distancia = (float) (example.calcularDistancia(i[779], i[592])*0.85);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Santo Domingo") {

                
                example.generateMarker(i[788]);
                for (jj = 787; jj > 591; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }
                for (jj = 590; jj > 511; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }
                example.generateMarker(i[512]);
                
                distancia = (float) (example.calcularDistancia(i[779], i[512])*5.7);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Latacunga") {

                for (kk = 275; kk >= 117; kk--) {
                    example.generarRuta(i[kk], i[kk + 1], false);
                }
                example.generarRuta(i[117], i[40], false);
                for (jj = 40; jj >= 29; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[29]);
                example.generateMarker(i[275]);

                distancia = example.calcularDistancia(i[29], i[276]);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Ibarra") {

                example.generateMarker(i[275]);
                for (kk = 275; kk >= 117; kk--) {
                    example.generarRuta(i[kk], i[kk + 1], false);
                }
                example.generarRuta(i[117], i[40], false);
                for (jj = 40; jj >= 0; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[0]);
                
                distancia = (float) (example.calcularDistancia(i[1], i[275])*0.85);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);
            }

        } else if (jComboBoxCiudadOrigen.getSelectedItem() == "Guayaquil") {
            if (jComboBoxCiudadDestino.getSelectedItem() == "Quito") {

                for (jj = 115; jj >= 11; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[11]);
                example.generateMarker(i[116]);

                distancia = (float) (example.calcularDistancia(i[11], i[116]) * 0.39);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Santo Domingo") {

                for (jj = 588; jj >= 514; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[589]);
                example.generateMarker(i[514]);

                distancia = (float) (example.calcularDistancia(i[514], i[589]) * 0.6);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Loja") {

                example.generateMarker(i[592]);
                for (jj = 591; jj < 787; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }
                example.generateMarker(i[788]);
                
                distancia = (float) (example.calcularDistancia(i[779], i[592])*0.85);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);
            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Latacunga") {

                for (jj = 588; jj >= 277; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generarRuta(i[277], i[23], false);
                for (jj = 23; jj <= 28; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[588]);
                example.generateMarker(i[29]);

                distancia = (float) ((example.calcularDistancia(i[588], i[28]))*0.3);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Ibarra") {

                for (jj = 588; jj >= 283; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generarRuta(i[279], i[22], false);
                for (jj = 21; jj > 0; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[588]);
                example.generateMarker(i[1]);

                distancia = (float) (example.calcularDistancia(i[588], i[1])*0.38);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            }
        } else if (jComboBoxCiudadOrigen.getSelectedItem() == "Ibarra") {
            if (jComboBoxCiudadDestino.getSelectedItem() == "Quito") {

                for (jj = 0; jj < 10; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[11]);
                example.generateMarker(i[0]);

                distancia = (float) (example.calcularDistancia(i[1], i[10]) * 0.4);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Guayaquil") {

                example.generateMarker(i[1]);
                for (jj = 0; jj < 21; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }
                example.generarRuta(i[22], i[279], false);
                for (jj = 283; jj <= 588; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[588]);

                distancia = (float) (example.calcularDistancia(i[588], i[1])*0.38);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

                //example.generateSimplePath(Quito, Guayaquil, true);
            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Latacunga") {

                example.generateMarker(i[0]);
                for (jj = 0; jj < 29; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[29]);

                distancia = (float) (example.calcularDistancia(i[1], i[29]) * 0.55);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Loja") {

                example.generateMarker(i[0]);
                for (jj = 0; jj <= 40; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }
                example.generarRuta(i[40], i[117], false);
                for (kk = 117; kk <= 275; kk++) {
                    example.generarRuta(i[kk], i[kk + 1], false);
                }

                example.generateMarker(i[275]);
                distancia = (float) (example.calcularDistancia(i[1], i[275])*0.85);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Santo Domingo") {

                example.generateMarker(i[0]);
                for (jj = 0; jj < 22; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }
                example.generarRuta(i[22], i[277], false);
                for (kk = 277; kk < 512; kk++) {
                    example.generarRuta(i[kk], i[kk + 1], false);
                }

                example.generateMarker(i[512]);

                distancia = (float) (example.calcularDistancia(i[1], i[512]) * 0.3);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);
            }
        } else if (jComboBoxCiudadOrigen.getSelectedItem() == "Santo Domingo") {
            if (jComboBoxCiudadDestino.getSelectedItem() == "Ibarra") {

                example.generateMarker(i[512]);
                for (kk = 511; kk > 277; kk--) {
                    example.generarRuta(i[kk], i[kk + 1], false);
                }
                example.generarRuta(i[277], i[22], false);
                for (jj = 21; jj > 0; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[0]);
                distancia = (float) (example.calcularDistancia(i[1], i[512]) * 0.3);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);
            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Guayaquil") {

                example.generateMarker(i[514]);
                for (jj = 514; jj <= 588; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[589]);

                distancia = (float) (example.calcularDistancia(i[514], i[589]) * 0.6);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Latacunga") {

                example.generateMarker(i[512]);
                for (kk = 511; kk > 277; kk--) {
                    example.generarRuta(i[kk], i[kk + 1], false);
                }
                example.generarRuta(i[277], i[23], false);
                for (jj = 23; jj < 29; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[29]);
                distancia = (float) (example.calcularDistancia(i[23], i[512]) * 0.3);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Loja") {

                
                example.generateMarker(i[512]);
                for (jj = 512; jj < 591; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }
                for (jj = 592; jj < 788; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }
                example.generateMarker(i[788]);
                
                
                distancia = (float) ((float) (example.calcularDistancia(i[779], i[512]))*5.7);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);
                
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Quito") {

                example.generateMarker(i[512]);
                for (jj = 511; jj > 277; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }
                example.generarRuta(i[278], i[22], false);
                for (kk = 21; kk > 11; kk--) {
                    example.generarRuta(i[kk], i[kk + 1], false);
                }
                example.generateMarker(i[12]);

                   distancia = (float) (example.calcularDistancia(i[11], i[511])*0.25);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);
            }
        } else if (jComboBoxCiudadOrigen.getSelectedItem() == "Latacunga") {
            if (jComboBoxCiudadDestino.getSelectedItem() == "Ibarra") {

                example.generateMarker(i[29]);
                for (jj = 28; jj > 0; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[1]);

                distancia = (float) (example.calcularDistancia(i[1], i[29]) * 0.55);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Guayaquil") {

                example.generateMarker(i[29]);
                for (jj = 28; jj > 23; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }
                example.generarRuta(i[23], i[277], false);
                for (kk = 277; kk <= 588; kk++) {
                    example.generarRuta(i[kk], i[kk + 1], false);
                }

                example.generateMarker(i[588]);

                distancia = (float) ((example.calcularDistancia(i[588], i[28]))*0.3);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);
            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Loja") {

                for (jj = 29; jj <= 40; jj++) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generarRuta(i[117], i[40], false);
                for (kk = 117; kk <= 275; kk++) {
                    example.generarRuta(i[kk], i[kk + 1], false);
                }

                example.generateMarker(i[29]);
                example.generateMarker(i[275]);

                distancia = example.calcularDistancia(i[29], i[276]);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);
            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Quito") {

                example.generateMarker(i[29]);
                for (jj = 28; jj > 10; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }

                example.generateMarker(i[11]);

                distancia = (float) (example.calcularDistancia(i[11], i[29]));
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);
                //example.generateSimplePath(Quito, Latacunga, true);
            } else if (jComboBoxCiudadDestino.getSelectedItem() == "Santo Domingo") {

                example.generateMarker(i[29]);
                for (jj = 28; jj > 23; jj--) {
                    example.generarRuta(i[jj], i[jj + 1], false);
                }
                example.generarRuta(i[277], i[23], false);
                for (kk = 277; kk < 512; kk++) {
                    example.generarRuta(i[kk], i[kk + 1], false);
                }

                example.generateMarker(i[512]);
                distancia = (float) (example.calcularDistancia(i[23], i[512]) * 0.25);
                tiempo = example.calcularTiempo(distancia);
                gananciaPolidriver = example.calcularGananciaAPP(distancia);
                tiempo = example.calcularTiempo(distancia);
                tiempoTotal = example.formatearMinutosAHoraMinuto((int) tiempo);
                monto = example.calcularMonto(distancia, gananciaPolidriver);

            }

        }

        DecimalFormat formato1 = new DecimalFormat("#.00");
        jTextFieldDistancia.setText(String.valueOf(formato1.format(distancia)) + " Km.");
        jTextFieldTiempoEstimado.setText(String.valueOf(tiempoTotal));

        jTextFieldCostoEstimado.setText(String.valueOf(formato1.format(monto)) + " $");
        jTextFieldGananciaPolidriver.setText(String.valueOf(formato1.format(gananciaPolidriver)) + " $");
        jComboBoxCiudadOrigen.enable(false);
        
       jComboBoxCiudadDestino.enable(false);
       
        jDateChooserSalida.setEnabled(true);
        jComboBoxHoraSalida.enable(true);
        jComboBoxMinutosSalida.enable(true);
        jTextFieldAsientos.setEditable(true);
        jTextFieldCosto.setEditable(true);
        jButtonCrearViaje.setEnabled(true);



    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        System.exit(0);
    }

    public void activarElementos() {
        jComboBoxCiudadOrigen.enable();
        jComboBoxCiudadDestino.enable();

    }//GEN-LAST:event_jButtonCalcularRutaActionPerformed

    private void cerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarActionPerformed
       
        FORMULARIO_LOGIN logeo = new FORMULARIO_LOGIN();
        logeo.setLocationRelativeTo(null);
        logeo.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_cerrarActionPerformed

    
    public void llenarTablaViaje(){
    
    
    }
    /**
     * @param args the command line arguments
     */
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ImagenAsientos;
    private javax.swing.JButton cerrar;
    private javax.swing.JButton jButtonCalcularRuta;
    private javax.swing.JButton jButtonCrearViaje;
    private javax.swing.JComboBox<String> jComboBoxCiudadDestino;
    private javax.swing.JComboBox<String> jComboBoxCiudadOrigen;
    private javax.swing.JComboBox<String> jComboBoxHoraSalida;
    private javax.swing.JComboBox<String> jComboBoxMinutosSalida;
    private com.toedter.calendar.JDateChooser jDateChooserSalida;
    private javax.swing.JLabel jLabelAsientos;
    private javax.swing.JLabel jLabelCiudadDestino;
    private javax.swing.JLabel jLabelCiudadOrigen;
    private javax.swing.JLabel jLabelCosto;
    private javax.swing.JLabel jLabelCostoEstimado;
    private javax.swing.JLabel jLabelDAtosViaje;
    private javax.swing.JLabel jLabelDistancia;
    private javax.swing.JLabel jLabelFechaDalida;
    private javax.swing.JLabel jLabelFechaViaje;
    private javax.swing.JLabel jLabelGanacias;
    private javax.swing.JLabel jLabelHoraSalida;
    private javax.swing.JLabel jLabelImagenDinero;
    private javax.swing.JLabel jLabelLogo;
    private javax.swing.JLabel jLabelMinutosSalida;
    private javax.swing.JLabel jLabelPuntosViaje;
    private javax.swing.JLabel jLabelTiempoEstimado;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelDisponibilidad;
    private javax.swing.JPanel jPanelViaje;
    private javax.swing.JTextField jTextFieldAsientos;
    private javax.swing.JTextField jTextFieldCosto;
    private javax.swing.JTextField jTextFieldCostoEstimado;
    private javax.swing.JTextField jTextFieldDistancia;
    private javax.swing.JTextField jTextFieldGananciaPolidriver;
    private javax.swing.JTextField jTextFieldTiempoEstimado;
    // End of variables declaration//GEN-END:variables
}
